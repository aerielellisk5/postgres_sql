SELECT c1, c2 FROM table_1
- will probably try not to use the *, that queries everything in the table_1
SELECT DISTINCT - only listing the unique/DISTINCT values in the column
ex: SELECT DISTINCT (column) FROM _table_
 - Count:

Comparison operators
=   equal
>   greater than
<   less than
>=
<=
<> or != 
AND
OR 
not

single quotes '' to denote strings


ORDER_BY
SELECT column_1, column_2
FROM table
ORDER BY column ASC/DESC
- users ASC by default


WHERE first_name IN('John', 'Jake', 'Julie')
searching for anything in the paranthesis

SELECT COUNT(*) FROM film
WHERE rating ='R' 
AND replacement_cost BETWEEN 5 AND 15
_______________________

Assessment #1 

COMPLETE THE FOLLOWING TASKS!

1. Return the customer IDs of customers who have spent at least $110 with the staff member who has an ID of 2.
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id 
HAVING SUM(amount) > 110


The answer should be customers 187 and 148.

2. How many films begin with the letter J?

The answer should be 20.

3. What customer has the highest customer ID number whose name starts with an 'E' and has an address ID lower than 500?
SELECT * from customer
WHERE address_id < 500 AND first_name LIKE 'E%'
ORDER BY customer_id DESC
LIMIT 1

INNER JOIN EXAMPLE
SELECT payment_id,payment.customer_id,first_name
FROM payment
INNER JOIN customer 
ON payment.customer_id = customer.customer_id



INNER JOIN EXAMPLE:

SELECT district, email FROM customer
INNER JOIN address
ON address.address_id = customer.address_id
WHERE district = 'California'

- you could actually switch customer and address, and it would return the same information

SELECT DISTINCT(TO_CHAR(payment_date, 'MONTH'))
FROM payment
